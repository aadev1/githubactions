name: 'Terraform Plan/Apply'

on:
  workflow_call:
    inputs:
      environment:
        description: 'The environment to deploy to'
        required: true
        type: string
      branch:
        description: 'The branch to run the apply job on'
        required: true
        type: string

permissions:
  id-token: write
  contents: read
  pull-requests: write

# env:
#   ARM_CLIENT_ID: "${{ secrets.AZURE_CLIENT_ID }}"
#   ARM_SUBSCRIPTION_ID: "${{ secrets.AZURE_SUBSCRIPTION_ID }}"
#   ARM_TENANT_ID: "${{ secrets.AZURE_TENANT_ID }}"

jobs:
  terraform-plan:
    name: 'Terraform Plan'
    runs-on: ubuntu-latest
    env:
      ARM_SKIP_PROVIDER_REGISTRATION: true
    outputs:
      tfplanExitCode: ${{ steps.tf-plan.outputs.exitcode }}

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_wrapper: false

    - name: Azure Login
      uses: azure/login@v1
      with:
        client-id: ${{ secrets[format('AZURE_CLIENT_ID_{0}', inputs.environment | upper)] }}
        tenant-id: ${{ secrets[format('AZURE_TENANT_ID_{0}', inputs.environment | upper)] }}
        subscription-id: ${{ secrets[format('AZURE_SUBSCRIPTION_ID_{0}', inputs.environment | upper)] }}

    - name: Terraform Init
      run: terraform init -backend-config=backend-${{ inputs.environment }}.conf
      env:
        ARM_CLIENT_ID: ${{ secrets[format('AZURE_CLIENT_ID_{0}', inputs.environment | upper)] }}
        ARM_SUBSCRIPTION_ID: ${{ secrets[format('AZURE_SUBSCRIPTION_ID_{0}', inputs.environment | upper)] }}
        ARM_TENANT_ID: ${{ secrets[format('AZURE_TENANT_ID_{0}', inputs.environment | upper)] }}

    - name: Terraform Format
      run: terraform fmt -check

    - name: Terraform Plan
      id: tf-plan
      run: |
        export exitcode=0
        terraform plan -detailed-exitcode -no-color -out tfplan || export exitcode=$?

        echo "exitcode=$exitcode" >> $GITHUB_OUTPUT
        
        if [ $exitcode -eq 1 ]; then
          echo Terraform Plan Failed!
          exit 1
        else 
          exit 0
        fi

    - name: Publish Terraform Plan
      uses: actions/upload-artifact@v4
      with:
        name: tfplan
        path: tfplan

    - name: Create String Output
      id: tf-plan-string
      run: |
        TERRAFORM_PLAN=$(terraform show -no-color tfplan)
        
        delimiter="$(openssl rand -hex 8)"
        echo "summary<<${delimiter}" >> $GITHUB_OUTPUT
        echo "## Terraform Plan Output" >> $GITHUB_OUTPUT
        echo "<details><summary>Click to expand</summary>" >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo '```terraform' >> $GITHUB_OUTPUT
        echo "$TERRAFORM_PLAN" >> $GITHUB_OUTPUT
        echo '```' >> $GITHUB_OUTPUT
        echo "</details>" >> $GITHUB_OUTPUT
        echo "${delimiter}" >> $GITHUB_OUTPUT

    - name: Publish Terraform Plan to Task Summary
      env:
        SUMMARY: ${{ steps.tf-plan-string.outputs.summary }}
      run: |
        echo "$SUMMARY" >> $GITHUB_STEP_SUMMARY

    - name: Push Terraform Output to PR
      if: github.ref != 'refs/heads/${{ inputs.branch }}'
      uses: actions/github-script@v7
      env:
        SUMMARY: "${{ steps.tf-plan-string.outputs.summary }}"
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const body = `${process.env.SUMMARY}`;
          github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
          })

  terraform-apply:
    name: 'Terraform Apply'
    if: github.ref == 'refs/heads/${{ inputs.branch }}' && needs.terraform-plan.outputs.tfplanExitCode == 2
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    needs: [terraform-plan]

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3

    - name: Azure Login
      uses: azure/login@v1
      with:
        client-id: ${{ secrets[format('AZURE_CLIENT_ID_{0}', inputs.environment | upper)] }}
        tenant-id: ${{ secrets[format('AZURE_TENANT_ID_{0}', inputs.environment | upper)] }}
        subscription-id: ${{ secrets[format('AZURE_SUBSCRIPTION_ID_{0}', inputs.environment | upper)] }}

    - name: Terraform Init
      run: terraform init -backend-config=backend-${{ inputs.environment }}.conf
      env:
        ARM_CLIENT_ID: ${{ secrets[format('AZURE_CLIENT_ID_{0}', inputs.environment | upper)] }}
        ARM_SUBSCRIPTION_ID: ${{ secrets[format('AZURE_SUBSCRIPTION_ID_{0}', inputs.environment | upper)] }}
        ARM_TENANT_ID: ${{ secrets[format('AZURE_TENANT_ID_{0}', inputs.environment | upper)] }}

    - name: Download Terraform Plan
      uses: actions/download-artifact@v4
      with:
        name: tfplan

    - name: Terraform Apply
      run: terraform apply -auto-approve tfplan
      env:
        ARM_CLIENT_ID: ${{ secrets[format('AZURE_CLIENT_ID_{0}', inputs.environment | upper)] }}
        ARM_SUBSCRIPTION_ID: ${{ secrets[format('AZURE_SUBSCRIPTION_ID_{0}', inputs.environment | upper)] }}
        ARM_TENANT_ID: ${{ secrets[format('AZURE_TENANT_ID_{0}', inputs.environment | upper)] }}